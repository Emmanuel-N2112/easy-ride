// Generated by CoffeeScript 1.4.0
var rideSearcher,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

rideSearcher = rideSearcher || {};

require(['components/map-route', 'components/input/date-picker'], function(MapRoute, DatePicker) {
  var RideSearcher, RouteRenderer;
  RideSearcher = (function() {

    function RideSearcher() {
      this.processResults = __bind(this.processResults, this);

      this.toJson = __bind(this.toJson, this);

      this.setButton = __bind(this.setButton, this);

      var _this = this;
      this.mapOptions = {
        center: new google.maps.LatLng(51.517099, -0.146084),
        zoom: 12,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      this.map = new google.maps.Map($('#map_canvas')[0], this.mapOptions);
      this.womenOnly = $('#search-women-only');
      this.departure = new DatePicker($('#search-departure'), $('#search-departure-date'), true);
      this.route = new MapRoute($('#search-route'), this.map, $('#search-from'), $('#search-to'));
      this.searchButton = $('#search-button');
      this.searchButton.click(function() {
        var data;
        if (_this.searchButton.hasClass('disabled')) {
          return null;
        }
        data = _this.toJson();
        if (data === null) {
          return null;
        }
        console.log(data);
        _this.setButton('btn btn-primary disabled', 'Searching...');
        return $.ajax({
          url: '/index_search.php',
          type: 'GET',
          data: {
            'data': JSON.stringify(data)
          },
          success: function(data) {
            var error, json;
            console.log(data);
            error = 'Unknown Error!';
            json = JSON.parse(data);
            if (json) {
              if (json['status'] === 'OK') {
                _this.processResults(json['trips']);
                _this.setButton('btn btn-primary', 'Search');
                return;
              } else {
                error = json['msg'];
              }
            }
            return _this.setButton('btn btn-danger', error);
          },
          error: function(data) {
            return this.setButton('btn btn-danger', 'Error!');
          }
        });
      });
      this.tripTemplate = _.template($('#trip-template').html());
      this.trips = $('#trips');
    }

    RideSearcher.prototype.setButton = function(btnClass, msg) {
      this.searchButton.attr('class', btnClass);
      return this.searchButton.text(msg);
    };

    RideSearcher.prototype.toJson = function() {
      var json, key, value;
      json = {
        women_only: this.womenOnly.prop('checked')
      };
      for (key in json) {
        value = json[key];
        if (value === null) {
          return null;
        }
      }
      return json;
    };

    RideSearcher.prototype.processResults = function(trips) {
      var i, trip, tripHTML, _i, _len, _results;
      this.tripsList = trips;
      i = 0;
      _results = [];
      for (_i = 0, _len = trips.length; _i < _len; _i++) {
        trip = trips[_i];
        i += 1;
        console.log(trip);
        new RouteRenderer(this.map, trip);
        tripHTML = this.tripTemplate(trip);
        console.log(tripHTML);
        _results.push(this.trips.append(tripHTML));
      }
      return _results;
    };

    return RideSearcher;

  })();
  RouteRenderer = (function() {

    function RouteRenderer(map, route) {
      var directionsDisplay, directionsService, mapRendererOptions, markerOptions, polylineOptions, request,
        _this = this;
      markerOptions = {
        visible: false
      };
      polylineOptions = {
        strokeColor: "#808080",
        strokeOpacity: .6,
        strokeWeight: 4
      };
      mapRendererOptions = {
        markerOptions: markerOptions
      };
      directionsDisplay = new google.maps.DirectionsRenderer(mapRendererOptions);
      directionsDisplay.setMap(map);
      console.log(directionsDisplay);
      request = {
        origin: route['origin']['address'],
        destination: route['destination']['address'],
        travelMode: google.maps.TravelMode.DRIVING,
        region: 'uk'
      };
      directionsService = new google.maps.DirectionsService();
      directionsService.route(request, function(result, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          console.log('Received directions');
          directionsDisplay.setDirections(result);
          return console.log(result);
        }
      });
    }

    return RouteRenderer;

  })();
  return rideSearcher = new RideSearcher();
});
