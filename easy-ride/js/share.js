// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

jQuery(function() {
  var DateTime, MapRoute, RideSharer;
  RideSharer = (function() {

    function RideSharer() {
      this.departure = new DateTime($('#share-departure-date'), $('#share-departure-time'));
      this.route = new MapRoute($('#share-route'), $('#share-from'), $('#share-to'), $('#share-trip-length'));
    }

    return RideSharer;

  })();
  /*
          A Google Maps based Route module for finding a origin and destination
          information with trip length.
  */

  MapRoute = (function() {

    function MapRoute(container, from, to, tripLength) {
      this.container = container;
      this.from = from;
      this.to = to;
      this.tripLength = tripLength;
      this.removeError = __bind(this.removeError, this);

      this.setError = __bind(this.setError, this);

      this.updateRoute = __bind(this.updateRoute, this);

      this.calculateRoute = __bind(this.calculateRoute, this);

      this.result;
      this.directionsDisplay = new google.maps.DirectionsRenderer();
      this.directionsService = new google.maps.DirectionsService();
      this.mapOptions = {
        center: new google.maps.LatLng(51.517099, -0.146084),
        zoom: 12,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      this.map = new google.maps.Map($('#map_canvas')[0], this.mapOptions);
      this.mapMarkers = [];
      this.directionsDisplay.setMap(this.map);
      this.from.change(this.calculateRoute);
      this.to.change(this.calculateRoute);
    }

    /*
                Uses Google Maps Directions API to calculate the route for the data
                entered by the user.
    */


    MapRoute.prototype.calculateRoute = function() {
      var from, request, to,
        _this = this;
      from = this.from.val().trim();
      to = this.to.val().trim();
      if (!from || !to) {
        return;
      }
      request = {
        origin: from,
        destination: to,
        travelMode: google.maps.TravelMode.DRIVING,
        region: 'uk'
      };
      return this.directionsService.route(request, function(result, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          _this.directionsDisplay.setDirections(result);
          _this.result = result;
          _this.removeError();
          return _this.updateRoute();
        } else {
          _this.result = null;
          return _this.setError('No routes found.');
        }
      });
    };

    /*
                Updates the form on the page to reflect the results of a route.
    */


    MapRoute.prototype.updateRoute = function() {
      var leg, route;
      route = this.result['routes'][0];
      leg = route['legs'][0];
      this.from.val(leg['start_address']);
      this.to.val(leg['end_address']);
      return this.tripLength.val(leg['duration']['text']);
    };

    /*
                Set routes error.
                Args:
                    msg {String}: error message string.
    */


    MapRoute.prototype.setError = function(msg) {
      var error;
      console.log(msg);
      this.removeError();
      this.container.addClass('error');
      error = $('<div>', {
        "class": 'controls help-inline error-msg'
      }).append(msg);
      console.log(error);
      return this.container.append(error);
    };

    /*
                Removes routes error.
    */


    MapRoute.prototype.removeError = function() {
      this.container.removeClass('error');
      return this.container.children().filter('.error-msg').remove();
    };

    return MapRoute;

  })();
  /*
          A DateTime module that uses a Bootstrap DatePicker and TimePicker and
          combines the input.
  */

  DateTime = (function() {

    function DateTime(dateField, timeField) {
      this.parseTime = __bind(this.parseTime, this);

      this.getDateTime = __bind(this.getDateTime, this);
      this.date = dateField.datepicker().data('datepicker');
      this.time = timeField.timepicker();
    }

    /*
                Returns departure time as an integer value, if entered
    */


    DateTime.prototype.getDateTime = function() {
      var date, dateString, time, timeString;
      dateString = this.date.element.children().filter('input').val();
      timeString = this.time.val();
      if (!dateString || !timeString) {
        console.log('Missing departure information');
        return null;
      }
      time = this.parseTime(timeString);
      date = this.date.date.valueOf() / 1000;
      console.log(time);
      console.log(date);
      return date + time;
    };

    DateTime.prototype.parseTime = function(string) {
      var hours, meridiem, minutes, strings, time;
      strings = string.split(' ');
      time = strings[0].split(':');
      meridiem = strings[1];
      hours = parseInt(time[0]);
      minutes = parseInt(time[1]);
      if (meridiem === 'PM') {
        hours += 12;
      }
      return hours * 3600 + minutes * 60;
    };

    return DateTime;

  })();
  return new RideSharer();
});
